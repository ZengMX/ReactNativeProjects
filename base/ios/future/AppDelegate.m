/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"
#import <React/RCTRootView.h>
// 热更新
#import <CodePush/CodePush.h>

//app跳转
#import "RCTLinkingManager.h"
// 启动页
#import "RCTSplashScreen.h"
// 银联
#import "UPPaymentControl.h"
// 原生推送
#import <React/RCTPushNotificationManager.h>
// 支付宝
#import <AlipaySDK/AlipaySDK.h>

// 分享
#import <ShareSDK/ShareSDK.h>
#import <ShareSDKConnector/ShareSDKConnector.h>

//腾讯开放平台（对应QQ和QQ空间）SDK头文件
#import <TencentOpenAPI/TencentOAuth.h>
#import <TencentOpenAPI/QQApiInterface.h>
//新浪微博
#import "WeiboSDK.h"

//微信
#import "WXApi.h"
#import "WXApiManager.h"
#import "RCTBundleURLProvider.h"

// 极光推送
#import "JPUSHService.h"
#import <UserNotifications/UserNotifications.h>

// IM融云组件
#import <RongIMKit/RongIMKit.h>
#import <RongIMLib/RongIMLib.h>
#import <MTChatMessage.h>
#import <MTOrderMessage.h>

// 数据统计
#import "TalkingData.h"
// 百度地图
#import <BaiduMapAPI_Base/BMKBaseComponent.h>

//shareSDK
#define SHARESDK_APPKEY @"cd21ec7c34c0"

//推送
#define PUSH_APPKEY @"10e573824d4544b67e8d44f3"

//微信
#define WX_APPKEY @"wx192648f6065f754f"
#define WX_SECRET @"d4624c36b6795d1d99dcf0547af5443d"
#define WX_DESCRIPTION @"注册微信描述"

//新浪微博

#define SINA_APPKEY @"1983463203"
#define SINA_SECRET @"cd32c0fe0569586e0b02340c3808ea22"

//QQ
#define QQ_APPID @"1104964436"
#define QQ_APPKEY @"IIGDaZtYEXVvJv1d"

//腾讯微博
#define TENCENT_WEIBO_APPID @"801307650"
#define TENCENT_WEIBO_SECRET @"ae36f4ee3946e1cbb98d6965b0b2ff5c"

//百度地图
#define BAIDUMAP_APPID @"anc0E24MmqaEtHztZG1uNxdS2zfMKYZW"

// 融云APP_KEY
#define APP_KEY @"pkfcgjstpr288"
// 数据统计APP_ID
#define APP_ID @"CC9AE0446D644F369E6946EC88C16756"

// 极光推送、百度地图接口
@interface AppDelegate()<JPUSHRegisterDelegate,BMKGeneralDelegate>
@property (nonnull,strong) RCTRootView *rootView;
@property (nonnull,strong) NSMutableArray *notificationInfos;
@end

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;
  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

  // jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
	#ifdef DEBUG
		jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index.ios" fallbackResource:nil];
    NSLog(@"1jsCodeLocation");
	#else
		jsCodeLocation = [CodePush bundleURL];
	#endif
  
  // IM融云组件
  [[RCIM sharedRCIM] initWithAppKey:APP_KEY];
  [[RCIM sharedRCIM] registerMessageType:MTChatMessage.class];
  [[RCIM sharedRCIM] registerMessageType:MTOrderMessage.class];
  
  //数据统计appid在TalkingData后台申请
  [TalkingData sessionStarted:APP_ID withChannelId:@"0"];
  
  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by the "Bundle React Native code and images" build step when
   * running the project on an actual device or running the project on the
   * simulator in the "Release" build configuration.
   */

//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"future"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];
  // 调用rn-splash-screen解决白屏问题
  [RCTSplashScreen show:rootView];
  
  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  self.rootView = rootView;
  

  
  //**************百度地图****************//
  [self doBMapPreset];
  
  //***************shareSDK**************//
  [self registerShareSDK];
  //**************向微信注册**************//
  [WXApi registerApp:WX_APPKEY withDescription:WX_DESCRIPTION];
  
  // 极光推送配置
  self.notificationInfos = [[NSMutableArray alloc]init];
  
  //极光推送把所有角标和消息清除
  [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];
  [JPUSHService resetBadge];
  
//极光推送初始化推送 SDK
  JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init];
  entity.types = JPAuthorizationOptionAlert|JPAuthorizationOptionBadge|JPAuthorizationOptionSound;
  if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
    // 可以添加自定义categories
    // NSSet<UNNotificationCategory *> *categories for iOS10 or later
    // NSSet<UIUserNotificationCategory *> *categories for iOS8 and iOS9
  }
  [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];
  // 开启推送 SDK
  [JPUSHService setupWithOption:launchOptions appKey:PUSH_APPKEY          //PUSH_APPKEY 极光官网注册提供
                        channel:@"appStore"                                        //渠道 （可选）
               apsForProduction:NO        //是否生产环境. 如果为开发状态,设置为 NO; 如果为生产状态,应改为 YES.    发布时候修改
          advertisingIdentifier:nil];
  
  return YES;
}

//极光推送  处理设备注册 在 iOS8 系统中，还需要添加这个方法。通过新的 API 注册推送服务
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
  
  [application registerForRemoteNotifications];
  [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];
}


- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  NSLog(@"test:%@",[[NSString alloc]initWithData:deviceToken encoding:NSUTF8StringEncoding]);
  [JPUSHService registerDeviceToken:deviceToken];
  
  [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

//极光推送 当 DeviceToken 获取失败时，系统会回调此方法
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
  NSLog(@"DeviceToken 获取失败，原因：%@",error);
}

// 极光推送 处理推送信息 第三方的回调共用(不同ios版本)代码
- (void)notificationWaiteRootView:(NSDictionary *)infos
{
  if (self.rootView.bridge.isLoading==YES) {
    [self.notificationInfos addObject:infos];
    [[NSNotificationCenter defaultCenter] addObserver:self                            //没加载完，注册监听
                                             selector:@selector(javaScriptDidLoad)
                                                 name:RCTJavaScriptDidLoadNotification
                                               object:nil];
  }else{
    [RCTPushNotificationManager didReceiveRemoteNotification:infos];               //直接把推送过来的信息发送给 RN 分析
  }
}

//极光推送 远程 IOS6以下回调
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
  // App 收到远程推送的通知
  [JPUSHService handleRemoteNotification:userInfo];
  NSDictionary* infos = [self reSetDic:userInfo value:@"didTap"];
  
  [self notificationWaiteRootView:infos];
}
//推送 远程 IOS7以上回调
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
  [JPUSHService handleRemoteNotification:userInfo];
  NSDictionary* infos = [self reSetDic:userInfo value:@"didTap"];
  
  [self notificationWaiteRootView:infos];
  
}
//推送 本地 IOS10以下回调
-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification{
  NSDictionary * userInfo = notification.userInfo;
  NSDictionary* infos = [self reSetDic:userInfo value:@"didTap"];
  
  [self notificationWaiteRootView:infos];
}

-(void)javaScriptDidLoad{
  [[NSNotificationCenter defaultCenter] removeObserver:self name:RCTJavaScriptDidLoadNotification object:nil];   //移除监听
  
  //延迟0.3秒，等其加载首页
  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
    for (NSDictionary *dic in self.notificationInfos) {
      [RCTPushNotificationManager didReceiveRemoteNotification:dic];   //直接把推送过来的信息发送给 RN 分析
    }
    
    [self.notificationInfos removeAllObjects];     //删除信息
  });
}
#pragma mark- JPUSHRegisterDelegate
//推送 IOS10以上回调
- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler {
  // Required
  NSDictionary * userInfo = notification.request.content.userInfo;
  NSDictionary* infos = [self reSetDic:userInfo value:@"didRecivice"];
  [self notificationWaiteRootView:infos];
  if([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
    [JPUSHService handleRemoteNotification:userInfo];
  }
  completionHandler(UNNotificationPresentationOptionAlert); // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以选择设置
  
}
- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {
  // Required
  NSDictionary * userInfo = response.notification.request.content.userInfo;
  NSDictionary* infos = [self reSetDic:userInfo value:@"didTap"];
  [RCTPushNotificationManager didReceiveRemoteNotification:infos];
  if([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {
    [JPUSHService handleRemoteNotification:userInfo];
  }
  completionHandler();  // 系统要求执行这个方法
}
//配置推送信息
-(NSMutableDictionary*)reSetDic:(NSDictionary*)userinfo value:(NSString*)stateValue{
  NSMutableDictionary *infos = [[NSMutableDictionary alloc]init];
  [infos setObject:userinfo forKey:@"extra"];
  [infos setObject:stateValue forKey:@"State"];
  return infos;
}



// 分享、多渠道登录
-(void)registerShareSDK
{
  
  [ShareSDK registerApp:SHARESDK_APPKEY
   
        activePlatforms:@[@(SSDKPlatformTypeSinaWeibo),
                          @(SSDKPlatformTypeQQ),
                          @(SSDKPlatformSubTypeQZone),
                          @(SSDKPlatformSubTypeQQFriend),
                          @(SSDKPlatformSubTypeWechatSession),
                          @(SSDKPlatformSubTypeWechatTimeline),
                          @(SSDKPlatformSubTypeWechatFav),
                          @(SSDKPlatformTypeTencentWeibo)]
               onImport:^(SSDKPlatformType platformType)
   {
     switch (platformType)
     {
       case SSDKPlatformTypeSinaWeibo:
         [ShareSDKConnector connectWeibo:[WeiboSDK class]];
         break;
       case SSDKPlatformTypeQQ:
         [ShareSDKConnector connectQQ:[QQApiInterface class] tencentOAuthClass:[TencentOAuth class]];
         break;
       case SSDKPlatformTypeWechat:
         //[ShareSDKConnector connectWeChat:[WXApi class]];
         [ShareSDKConnector connectWeChat:[WXApi class] delegate:self];
         break;
       default:
         break;
     }
   }
        onConfiguration:^(SSDKPlatformType platformType, NSMutableDictionary *appInfo)
   {
     
     switch (platformType)
     {
       case SSDKPlatformTypeSinaWeibo:
         //设置新浪微博应用信息,其中authType设置为使用SSO＋Web形式授权
         [appInfo SSDKSetupSinaWeiboByAppKey:SINA_APPKEY
                                   appSecret:SINA_SECRET
                                 redirectUri:@"http://www.sharesdk.cn"
                                    authType:SSDKAuthTypeBoth];
         break;
         //设置QQ应用信息,其中authType设置为使用SSO＋Web形式授权
       case SSDKPlatformTypeQQ:
         [appInfo SSDKSetupQQByAppId:QQ_APPID
                              appKey:QQ_APPKEY
                            authType:SSDKAuthTypeBoth];
         break;
       case SSDKPlatformTypeTencentWeibo:
         //设置腾讯微博应用信息，其中authType设置为只用Web形式授权
         [appInfo SSDKSetupTencentWeiboByAppKey:TENCENT_WEIBO_APPID
                                      appSecret:TENCENT_WEIBO_SECRET
                                    redirectUri:@"http://www.sharesdk.cn"];
         break;
         //设置微信应用信息，其中authType设置为只用Web形式授权
       case SSDKPlatformTypeWechat:
         [appInfo SSDKSetupWeChatByAppId:WX_APPKEY
                               appSecret:WX_SECRET];
         break;
         //设置QQ空间应用信息，其中authType设置为只用Web形式授权
       case SSDKPlatformSubTypeQZone:
         [appInfo SSDKSetupQQByAppId:QQ_APPID
                              appKey:QQ_APPKEY
                            authType:SSDKAuthTypeBoth];
         break;
       default:
         break;
     }
   }];
}

// 百度地图
- (void)doBMapPreset
{
  self.mapManager = [[BMKMapManager alloc]init];
  BOOL ret = [self.mapManager start:BAIDUMAP_APPID generalDelegate:(id)self];
  if (!ret) {
    NSLog(@"manager start failed!");
  }
}

-(BOOL)payfinishWithUrl:(NSURL*)url Application:(UIApplication *)application{
  
  NSString *host = [url host];
  
  // 微信支付配置
  if ([host isEqualToString:@"www.imall.com.cn"]) { //测试连接 leshangbase://www.imall.com.cn
    return [RCTLinkingManager application:application openURL:url
                        sourceApplication:nil annotation:nil];
  }else if([host isEqualToString:@"pay"]){
    return [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];
  } else if([host isEqualToString:@"safepay"]){
    // 支付宝支付配置，创建一个消息对象
    NSNotification * notice = [NSNotification notificationWithName:@"alipay" object:nil userInfo:@{@"url":[url absoluteString]}];
    //发送消息
    [[NSNotificationCenter defaultCenter] postNotification:notice];
    return YES;
  }else if([host isEqualToString:@"uppaywallet"]||[host isEqualToString:@"uppayresult"]){
    // 银联支付配置
    [[UPPaymentControl defaultControl] handlePaymentResult:url completeBlock:^(NSString *code, NSDictionary *data) {
      NSString *content = @"";
      if([code isEqualToString:@"success"]) {
        content = @"支付成功";
      }else if([code isEqualToString:@"fail"]) {
        content = @"支付失败";
      }else if([code isEqualToString:@"cancel"]) {
        content = @"交易取消";
      }
      
      NSNotification * notice = [NSNotification notificationWithName:@"UPPay" object:nil userInfo:@{@"code":code,@"content":content}];
      [[NSNotificationCenter defaultCenter] postNotification:notice];
    }];
  }
  return YES;
}

//IOS9以上回调
// 支付
- (BOOL)application:(UIApplication *)application openURL:(nonnull NSURL *)url options:(nonnull NSDictionary *)options{
  return [self payfinishWithUrl:url Application:application];
}
//IOS4以下回调
//微信支付返回结果
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
  return [self payfinishWithUrl:url Application:application];
}
//IOS4到 IOS9回调
//微信支付返回结果
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
  return [self payfinishWithUrl:url Application:application];
}
//IOS9 下拉搜索的打开回调，极少使用
- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity
 restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler
{
  return [RCTLinkingManager application:application
                   continueUserActivity:userActivity
                     restorationHandler:restorationHandler];
}

// APP进入后台、前台执行代码
- (void)applicationDidEnterBackground:(UIApplication *)application
{
  // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
  // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
//  NSLog(@"applicationDidEnterBackground");

}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
  // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
//  NSLog(@"applicationDidBecomeActive");

  
}


// 百度联网、定位授权
- (void)onGetNetworkState:(int)iError
{
  if (0 == iError) {
    NSLog(@"联网成功");
  }
  else{
    NSLog(@"onGetNetworkState %d",iError);
  }
  
}

- (void)onGetPermissionState:(int)iError
{
  if (0 == iError) {
    NSLog(@"授权成功");
  }
  else {
    NSLog(@"onGetPermissionState %d",iError);
  }
}

@end

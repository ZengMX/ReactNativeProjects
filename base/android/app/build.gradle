apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
// 解决热更新报错，无法读取资源文件
//apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    // 配置SDK版本
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    // 配置包名、兼容android版本、目标版本、本APP版本号
    defaultConfig {
        applicationId "cn.com.imall.base"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.0"

        //极光推送，选择要添加的对应cpu类型的.so库。
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a','x86', 'x86_64', 'mips', 'mips64'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,  //固定
                JPUSH_APPKEY : "10e573824d4544b67e8d44f3", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL : "xiaomi", //暂时填写默认值即可.
        ]


        //使用分包
        multiDexEnabled true

        //毛玻璃配置
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled  true

    }

    //扩大栈
    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        // 签名文件配置，debug、release
        debug {
            storeFile file("debug.keystore")
        }

        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }

    // 系统自动生成
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }


    buildTypes {
        debug {
            buildConfigField "String", "CODEPUSH_KEY", '"tLi5QqpWlXULaiJaE0ayeto5zo6n4ksvOXqog"'
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "CODEPUSH_KEY", '"GY8bDSDKObyMs24nz7KLXOnHY2Ek4ksvOXqog"'
            // 当注释掉下面一行时为debug版本
            signingConfig signingConfigs.release
        }
    }

    // 系统自动生成applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    // IM组件
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

}

//毛玻璃配置
repositories {
    maven { url 'https://github.com/500px/500px-android-blur/raw/master/releases/' }
}
buildscript {
    repositories {
        maven { url 'https://github.com/500px/500px-android-blur/raw/master/releases/' }
    }
    dependencies {
        classpath 'com.fivehundredpx:blurringview:1.0.0'
    }
}
//毛玻璃配置结束

dependencies {
    compile project(':react-native-svg')
    compile project(':react-native-code-push')
    compile project(':react-native-uploader')
    compile project(':react-native-spinkit')
    compile project(':@imall-test/rnkit-actionsheet-picker')
    compile project(':@imall-test/rn-splash-screen')
    compile project(':@imall-test/react-native-weixinpay')
    compile project(':@imall-test/react-native-uppay')
    compile project(':@imall-test/react-native-switchbutton')
    compile project(':@imall-test/react-native-status-android')
    compile project(':@imall-test/react-native-statistics')
    compile project(':@imall-test/react-native-sharesdk')
    compile project(':@imall-test/react-native-ripple')
    compile project(':@imall-test/react-native-qrcode')
    compile project(':@imall-test/react-native-picker')
    compile project(':@imall-test/react-native-photobrowser')
    compile project(':@imall-test/react-native-jpush')
    compile project(':@imall-test/react-native-image-picker')
    compile project(':@imall-test/react-native-http-cache')
    compile project(':@imall-test/react-native-cookiemanager')
    compile project(':@imall-test/react-native-clock')
    compile project(':@imall-test/react-native-chrosslocation')
    compile project(':@imall-test/react-native-chat')
    compile project(':@imall-test/react-native-brushboard')
    compile project(':@imall-test/react-native-blur')
    compile project(':@imall-test/react-native-banner')
    compile project(':@imall-test/react-native-baidu-map')
    compile project(':@imall-test/react-native-alipay')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:multidex:1.0.0'//分包依赖
    compile 'com.facebook.react:react-native:+'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
